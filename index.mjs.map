{"version":3,"file":"index.mjs","sources":["../lib/logcdf.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {number} evaluated logCDF\n*\n* @example\n* var y = logcdf( 0.5, 1.0, 1.0 );\n* // returns ~-0.693\n*\n* @example\n* var y = logcdf( 0.5, 2.0, 4.0 );\n* // returns ~-0.38\n*\n* @example\n* var y = logcdf( 0.2, 2.0, 2.0 );\n* // returns ~-2.546\n*\n* @example\n* var y = logcdf( 0.8, 4.0, 4.0 );\n* // returns ~-0.13\n*\n* @example\n* var y = logcdf( -0.5, 4.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logcdf( 1.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = logcdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logcdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction logcdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta <= 0.0 ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn NINF;\n\t}\n\tif ( x >= 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn ln( 1.0 - pow( 1.0 - pow( x, a ), b ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = logcdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.\n*\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {Function} CDF\n*\n* @example\n* var logcdf = factory( 0.5, 0.5 );\n*\n* var y = logcdf( 0.8 );\n* // returns ~-0.393\n*\n* y = logcdf( 0.3 );\n* // returns ~-1.116\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta <= 0.0 ||\n\t\tb <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logcdf;\n\n\t/**\n\t* Evaluates the natural logarithm of the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated logCDF\n\t*\n\t* @example\n\t* var y = logcdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logcdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn NINF;\n\t\t}\n\t\tif ( x >= 1.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn ln( 1.0 - pow( 1.0 - pow( x, a ), b ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the natural logarithm of the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.\n*\n* @module @stdlib/stats-base-dists-kumaraswamy-logcdf\n*\n* @example\n* var logcdf = require( '@stdlib/stats-base-dists-kumaraswamy-logcdf' );\n*\n* var y = logcdf( 0.5, 1.0, 1.0 );\n* // returns ~-0.693\n*\n* y = logcdf( 0.5, 2.0, 4.0 );\n* // returns ~-0.38\n*\n* @example\n* var factory = require( '@stdlib/stats-base-dists-kumaraswamy-logcdf' ).factory;\n*\n* var logcdf = factory( 0.5, 0.5 );\n*\n* var y = logcdf( 0.8 );\n* // returns ~-0.393\n*\n* y = logcdf( 0.3 );\n* // returns ~-1.118\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar logcdf = require( './logcdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( logcdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = logcdf;\n"],"names":["isnan","require$$0","pow","require$$1","ln","require$$2","NINF","require$$3","constantFunction","require$$4","logcdf","x","a","b","NaN","factory","lib"],"mappings":";;kjBAsBA,IAAIA,EAAQC,EACRC,EAAMC,EACNC,EAAKC,EACLC,EAAOC,EA+EX,IClFIC,EAAmBP,EACnBD,EAAQG,EACRD,EAAMG,EACND,EAAKG,EACLD,EAAOG,EA4DX,ICrCAC,EFiCA,SAAiBC,EAAGC,EAAGC,GACtB,OACCb,EAAOW,IACPX,EAAOY,IACPZ,EAAOa,IACPD,GAAK,GACLC,GAAK,EAEEC,IAEHH,GAAK,EACFL,EAEHK,GAAK,EACF,EAEDP,EAAI,EAAMF,EAAK,EAAMA,EAAKS,EAAGC,GAAKC,KEhD1CE,EDHA,SAAkBH,EAAGC,GACpB,OACCb,EAAOY,IACPZ,EAAOa,IACPD,GAAK,GACLC,GAAK,EAEEL,EAAkBM,KAe1B,SAAiBH,GAChB,GAAKX,EAAOW,GACX,OAAOG,IAER,GAAKH,GAAK,EACT,OAAOL,EAER,GAAKK,GAAK,EACT,OAAO,EAER,OAAOP,EAAI,EAAMF,EAAK,EAAMA,EAAKS,EAAGC,GAAKC,MC/B3CZ,EAOAS,EAAA,UAAAK,GAKA,IAAAC,EAAAN"}